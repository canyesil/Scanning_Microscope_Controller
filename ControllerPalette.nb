(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     32180,        673]
NotebookOptionsPosition[     31707,        655]
NotebookOutlinePosition[     32167,        673]
CellTagsIndexPosition[     32124,        670]
WindowTitle->Scanning Laser Microscope Controller
WindowFrame->Palette*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 TemplateBox[{
   PanelBox[
    TagBox[
     GridBox[{{
        ButtonBox[
        "\"Reset Settings\"", 
         ButtonFunction :> (ClearAll["Global`*"]; 
          AudioStop[]; $CellContext`dx = 50; $CellContext`dy = 
           50; $CellContext`ratio = 1; $CellContext`LaserP = 
           127; $CellContext`step = 150; $CellContext`path = 
           NotebookDirectory[] <> "ControllerPalette.nb"; SetDirectory[
            NotebookDirectory[]]; 
          Import[NotebookDirectory[] <> "Functions.m"]; $CellContext`img = 
           Image[
             Table[{1., 1., 1.}, 
              Round[$CellContext`dx 3 $CellContext`ratio], 
              Round[$CellContext`dy 3 $CellContext`ratio]]]; 
          Export[NotebookDirectory[] <> "dashed_area.png", 
            Framed[$CellContext`img]]; $CellContext`imgpath = 
           NotebookDirectory[] <> "dashed_area.png"; $CellContext`refresh = 
           ImageResize[
             Import[NotebookDirectory[] <> "VistalCO_refresh_icon_2.png"], {
             20, 20}]; $CellContext`inputDev = $DefaultAudioInputDevice; \
$CellContext`fd = $CellContext`GetFiles[
            "/dev/", "*usb*"]; $CellContext`ff = $CellContext`GetFolders[
            NotebookDirectory[] <> "Measurements/"]; $CellContext`conf = 
           Map[Part[
              Import[NotebookDirectory[] <> "main.conf"], 
              Span[1, All], #]& , {1, 2}]; $CellContext`confassoc = 
           AssociationThread[
             Part[$CellContext`conf, 1], 
             Part[$CellContext`conf, 2]]; $CellContext`CenterFreq = 
           ToExpression[
             $CellContext`confassoc[
             "LaserPulseFrequency"]]; $CellContext`Bandwidth = ToExpression[
             $CellContext`confassoc["FrequencyGap"]]; $CellContext`MovAv = 
           ToExpression[
             $CellContext`confassoc["MovingAvarage"]]; $CellContext`onoff = 
           0; $CellContext`OutImage = 
           ConstantImage[0.6, {600, 600}]; $CellContext`status = 
           Style["Ready", 14, Black]; $CellContext`progresss = 
           Style["0", 14, Black]; $CellContext`progreS = 
           Style["0", 14, Black]; Null), Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]}, {
        PanelBox[
         TemplateBox[{
           PanelBox[
            TagBox[
             GridBox[{{
                StyleBox["\"Scanning Settings\"", "Title", 20, 
                 RGBColor[0.216, 0.659, 0.675], StripOnInput -> False]}, {
                SliderBox[
                 Dynamic[$CellContext`dx], {2, 150, 2}]}, {
                TemplateBox[{
                  StyleBox[
                   InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\"dx: \"", TextForm]], "InlineText"], 
                    Text["dx: "]], 14, StripOnInput -> False], 
                  DynamicBox[
                   ToBoxes[$CellContext`dx, StandardForm]]}, "RowDefault"]}, {
               
                SliderBox[
                 Dynamic[$CellContext`dy], {2, 150, 2}]}, {
                TemplateBox[{
                  StyleBox[
                   InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\"dy: \"", TextForm]], "InlineText"], 
                    Text["dy: "]], 14, StripOnInput -> False], 
                  DynamicBox[
                   ToBoxes[$CellContext`dy, StandardForm]]}, "RowDefault"]}, {
               
                SliderBox[
                 Dynamic[$CellContext`ratio], {0.1, 3, 0.1}]}, {
                TemplateBox[{
                  StyleBox[
                   InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\"Magnification: \"", TextForm]], "InlineText"], 
                    
                    Text["Magnification: "]], 14, StripOnInput -> False], 
                  DynamicBox[
                   ToBoxes[$CellContext`ratio, StandardForm]]}, 
                 "RowDefault"]}, {
                TemplateBox[{
                  ButtonBox[
                  "\"Apply\"", 
                   ButtonFunction :> ($CellContext`cmretto = 
                    Table[
                    0, $CellContext`dx, $CellContext`dy]; $CellContext`img = 
                    Image[
                    Table[{1., 1., 1.}, 
                    Round[$CellContext`dx 3 $CellContext`ratio], 
                    Round[$CellContext`dy 3 $CellContext`ratio]]]; Null), 
                   ImageSize -> {80, 27}, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  ButtonBox[
                  "\"Process\"", 
                   ButtonFunction :> ($CellContext`dim = {$CellContext`dx, \
$CellContext`dy}; $CellContext`lines = \
$CellContext`process2[$CellContext`dim, $CellContext`cmretto]; \
$CellContext`plt = ListPlot[
                    Accumulate[$CellContext`lines], 
                    AspectRatio -> {$CellContext`dim}, PlotStyle -> 
                    PointSize[0.008], ImageSize -> 200, Frame -> None, Axes -> 
                    None, FrameTicks -> None]; $CellContext`img = 
                    ImageResize[
                    ImageRotate[
                    Rasterize[$CellContext`plt], 0 Degree], {
                    Round[$CellContext`dx 3 $CellContext`ratio], 
                    
                    Round[$CellContext`dy 
                    3 $CellContext`ratio]}]; $CellContext`comngap = \
({$CellContext`comm, $CellContext`gap} = \
$CellContext`processC[$CellContext`LaserP, $CellContext`step, \
$CellContext`dx, $CellContext`dy]); 
                    Export[NotebookDirectory[] <> 
                    "commngap.mx", $CellContext`comngap, "MX"]; 
                    ImageSize -> {80, 27}), Appearance -> Automatic, 
                   Evaluator -> Automatic, Method -> "Preemptive"]}, 
                 "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
               DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], ImageSize -> {250, 250}], 
           PanelBox[
            DynamicBox[
             ToBoxes[
              Refresh[$CellContext`img, UpdateInterval -> 0], StandardForm]], 
            ImageSize -> {175, 250}]}, "RowDefault"]]}, {
        PanelBox[
         TagBox[
          GridBox[{{
             StyleBox["\"USB-Serial Device\"", "Title", 20, 
              RGBColor[0.216, 0.659, 0.675], StripOnInput -> False]}, {
             TemplateBox[{
               ButtonBox[
                GraphicsBox[
                 TagBox[
                  RasterBox[CompressedData["
1:eJx1lAdQFGcUgN/t7t3RFLhDQDw4EAEpSlXqIb1IDXhiAhpBSixBUZqKIko0
GFBACBIQKSGHjEgJCAQVIlgiopKoQSxoBnXArgMCt7d/9g50HCeZnW/f/juz
37z/f++tXtTmkFgMALbJ0beQyBTXrVsjt4eq0Ath/Lb1cfEx0b7xiTFxMVvt
onD6pdoMBA0pIQEhBDU95Qz3XUsYwQcEXGG+g1XgPhcI2OuM+6U7gX+6QIbf
bicZXjttceF+b+zd+FvZtxRFyaIUkpr2Vd4uJAyz6ZQaQrKTH+gi88NMOYMd
s8Bot4KaQQbLUi+dsNdOwcx4m7DZnHAAvWg2vHj3DP8fH6N6oJhhVTRb/srj
zqGjw7HIVcStcqswabCok3u5pJOJlvUyketVFrI7q/TE5he1Ms9CY+OJ8Qmp
C/8PH1F6I5ex4pR1UO+bVnRsaD8Z1eOJLGuV0eJmAjlcZVF+A0xy5RCTcruJ
I6MWAplVq7z9dbTkS6lDQkmwjz6JWBrxkr5s2PZ7YGPN6PdU/ICb2LqdSRrX
EKRFE5u06WIg2x5AdjTWXZjYrIU5qVOMIX4xSM6MiPymnSQ2nZ9YFmtvFvFS
ri0fS3nkTPncwimH8yy0qI6NTGoIJGhSHXer17wjaOS+sGpiISMRIOPj7AnV
TIzyFOn8KaYmpXumPZTUS0h91Xcy9oZf56PAfvkJj6tM0vYMW2wqYlNeIqMa
39JFeoJD+izXPAPNgEqzjS4ntId1cjHEzQLUcLdUSFESqWe6NojeO32eaZci
Clw6FN/7XFREHpdZaGkHhlxbuJKwdvVS62weWGdpYub75oBBsiI4fqcjZ1ug
carw+vaDM+fGpJ2MT/ulrD8fFpdy5juL+JGOIs5Ju0bFp0sbZ6M1V7jI4Yi6
vkP+fFh6aJ5OcIV9km+plb1Toa58ZncipHVugN4n3TBTFxnS586h05DcEQ07
2jeAWeIcME1TxSxz1f29qvipjkd4s5wKDMDqkErQ5j5rdHr4JCoZPPB8U0/Q
Ofc6/cyd59f7//PmofoH1ycQ4gkSXHL5voLDfG+TJBVYmKoM0n1aZ80lbPN4
IOxS6Err+5oqH8pBlaN7UdWrFJTx0AsV3U7J+eCZ6UdZnQdf92qHtVmNHRlK
QdFtbsXu+cZm9lm6YH+QD8tLLOa4Vxs2mldoUoIGvjj0kgkZ/8BxMumxKXVp
9GTAtGs6x/sjg9jx8yXY+gv+rWvOeaH0u+FTmc/80LrBhZOeHXMvujZptTu3
qj/Xq8SRZjFQ2tWATFqAcrrCQsLrWk9fjo0qfcjv2dtRMEzgsUEIGjbHFGp9
mhcgl1aeeNll1pT/XUDL7wNyvAnI6gIgs2ZcoluGS3hHMXJBJUus3whUUl9o
BaLoeiASnxRPQnCOJ86MACP1WLaPWix42/xEdJqICGRQT89EN0553iAml9HY
XMRJi99wZHgCQzqlGFpQrkBq0HmK7hV8MTMbxJNXwwBhoIiHg+XsKHBVjgR3
bgzDwyxHPs9cpPjQspWFLM/iyIrGsh1Hi0/h7/n5+B86GVhZ+GUtpFXIHImp
+Ep55PVTaa8wpPObWZ+GBfzgzdaLV1NQjSZ4quswm1mrwVTtG9xiXqqcp/Ye
Vvi8XXicZgqWwN3A2KS8FkKUIsBFeE7pnuBH9W7wA80tVXH4Z70CEYUhAEHA
V44CX04MYyUnGg/mROIeNI6cSELAiSJCuNHEt2qxeDInmkjU2Igf0Nkit4cR
Bosy6lKl8yGbkSlySvaf7n90jbG2KIJlkKDFZa8BffocrGEluND40PjJopBe
h4ENrAIbxioIpS8vgwQNhTfjr6V9x/g8Rynjk2Pw9+Nb0PFXG/zcUw75bdmM
vNaDMsq6iqG9vxnqe2thdeEKdmC2H7t7oPPjvP0LVKoWgA==
                   
                   "], {{0, 20.}, {20., 0}}, {0, 255}, ColorFunction -> 
                   RGBColor], 
                  BoxForm`ImageTag[
                  "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                   MetaInformation -> <|
                    "Comments" -> <|"Software" -> "Adobe ImageReady"|>|>], 
                  Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
                 ImageSizeRaw -> {20., 20.}, 
                 PlotRange -> {{0, 20.}, {0, 20.}}], 
                ButtonFunction :> ($CellContext`fd = $CellContext`GetFiles[
                  "/dev/", "*usb*"]), Appearance -> None, Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               DynamicBox[
                ToBoxes[
                 PopupMenu[
                  Dynamic[$CellContext`xrn], $CellContext`fd], StandardForm]],
                "\"   \"", 
               ButtonBox[
               "\"ON\"", ButtonFunction :> 
                If[$CellContext`onoff == 
                  0, $CellContext`c = 
                   RGBColor[0, 1, 0, 0.5]; $CellContext`dev = 
                   DeviceOpen[
                    "Serial", {$CellContext`xrn, "BaudRate" -> 
                    115200}]; $CellContext`onoff = 1, $CellContext`c = 
                   RGBColor[0.9117, 0.396, 0.0274]; 
                  DeviceClose[$CellContext`dev]; $CellContext`onoff = 0; 
                  Null], Background -> Dynamic[$CellContext`c], 
                ImageSize -> {50, 50}, Appearance -> Automatic, Evaluator -> 
                Automatic, Method -> "Preemptive"], "\" \""}, 
              "RowDefault"]}, {"\" \""}, {
             TagBox[
              GridBox[{{
                 StyleBox["\"Signal Input Device\"", "Title", 20, 
                  RGBColor[0.216, 0.659, 0.675], StripOnInput -> False]}, {
                 DynamicBox[
                  ToBoxes[
                   PopupMenu[
                    Dynamic[$CellContext`inputDev], $AudioInputDevices], 
                   StandardForm]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
               "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"]}, {"\"  \""}, {"\"  \""}, {
             StyleBox["\"Writing Parameters\"", "Title", 20, 
              RGBColor[0.216, 0.659, 0.675], StripOnInput -> False]}, {
             SliderBox[
              Dynamic[$CellContext`LaserP], {0, 255, 1}]}, {
             TemplateBox[{
               StyleBox[
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox["\"Laser Power(%): \"", TextForm]], "InlineText"], 
                 
                 Text["Laser Power(%): "]], 14, StripOnInput -> False], 
               DynamicBox[
                ToBoxes[$CellContext`LaserP, StandardForm]]}, "RowDefault"]}, {
             SliderBox[
              Dynamic[$CellContext`step], {0, 1000, 10}]}, {
             TemplateBox[{
               StyleBox[
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox["\"Step interval (ms): \"", TextForm]], 
                  "InlineText"], 
                 Text["Step interval (ms): "]], 14, StripOnInput -> False], 
               DynamicBox[
                ToBoxes[$CellContext`step, StandardForm]]}, "RowDefault"]}, {
             TemplateBox[{
               ButtonBox[
               "\"RUN\"", 
                ButtonFunction :> ($CellContext`t = False; $CellContext`ddy = 
                  1; $CellContext`fold = "Signal_out_" <> StringReplace[
                    DateString[], {" " -> "_", ":" -> "-"}]; 
                 CreateDirectory[
                  NotebookDirectory[] <> 
                   "Measurements/" <> $CellContext`fold]; 
                 Export[NotebookDirectory[] <> 
                   "Measurements/" <> $CellContext`fold <> 
                   "/dxdy.mx", {$CellContext`dx, $CellContext`dy}]; \
{$CellContext`comm, $CellContext`gap} = 
                  Import[NotebookDirectory[] <> 
                    "commngap.mx"]; $CellContext`temp = 
                  Style["Running... ", 14, Black]; $CellContext`astream = 
                  AudioStream[$CellContext`inputDev]; $CellContext`len = 
                  Length[$CellContext`comm]; $CellContext`recstart = 
                  Range[1, $CellContext`len, 3]; $CellContext`recstop = 
                  Range[3, $CellContext`len, 3]; 
                 For[$CellContext`ii = 1, $CellContext`ii <= $CellContext`len, 
                   Increment[$CellContext`ii], $CellContext`progreS = Style[
                    ToString[($CellContext`ii 100.)/$CellContext`len], 14, 
                    Black]; If[
                    MemberQ[$CellContext`recstop, $CellContext`ii], 
                    AudioStop[]; $CellContext`aud = 
                    Audio[$CellContext`recording]; 
                    Export[NotebookDirectory[] <> 
                    "Measurements/" <> $CellContext`fold <> "/" <> 
                    ToString[$CellContext`ii] <> ".wav", $CellContext`aud]; 
                    Pause[0.5]; Null]; 
                   If[$CellContext`t, $CellContext`temp = 
                    Style["Stopped", 14, Black]; Break[]]; If[
                    
                    MemberQ[$CellContext`recstart, $CellContext`ii], \
$CellContext`imgd = ImageData[$CellContext`img]; AddTo[$CellContext`ddy, 3]; 
                    Part[$CellContext`imgd, 
                    Span[$CellContext`ddy, $CellContext`ddy + 3]] = 
                    Part[$CellContext`imgd, 
                    Span[$CellContext`ddy, $CellContext`ddy + 3]] 
                    0; $CellContext`img = 
                    Image[$CellContext`imgd]; $CellContext`recording = 
                    AudioRecord[$CellContext`astream]; Null]; 
                   DeviceWriteBuffer[$CellContext`dev, 
                    Part[$CellContext`comm, $CellContext`ii]]; 
                   Pause[Part[$CellContext`gap, $CellContext`ii] 10^(-3) + 
                    0.2]; Null]; $CellContext`temp = 
                  Style["Finished", 14, Black]; Null), ImageSize -> {70, 40}, 
                Method -> "Queued", Appearance -> Automatic, Evaluator -> 
                Automatic], 
               ButtonBox[
               "\"STOP\"", 
                ButtonFunction :> ($CellContext`t = True; $CellContext`temp = 
                  Style["Stopped", 14, Black]; AudioStop[]; Null), Method -> 
                "Preemptive", ImageSize -> {70, 40}, Appearance -> Automatic, 
                Evaluator -> Automatic]}, "RowDefault"]}, {
             DynamicBox[
              ToBoxes[
               Refresh[$CellContext`temp, UpdateInterval -> 0], 
               StandardForm]]}, {
             TemplateBox[{
               StyleBox["\"Progress: \"", 14, 
                GrayLevel[0], StripOnInput -> False], 
               DynamicBox[
                ToBoxes[
                 Refresh[$CellContext`progreS, UpdateInterval -> 0], 
                 StandardForm]], 
               StyleBox["\" %\"", 14, 
                GrayLevel[0], StripOnInput -> False]}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
         ImageSize -> {445, 400}]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
      "Column", 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
   TagBox[
    GridBox[{{
       PanelBox[
        TagBox[
         GridBox[{{
            StyleBox["\"Image Process\"", "Title", 20, 
             RGBColor[0.216, 0.659, 0.675], StripOnInput -> False]}, {
           "\" \""}, {
            StyleBox["\"Choose folder containing scan records\"", 14, 
             GrayLevel[0], StripOnInput -> False]}, {
            TemplateBox[{
              DynamicBox[
               ToBoxes[
                PopupMenu[
                 Dynamic[$CellContext`folder], $CellContext`ff], 
                StandardForm]], 
              ButtonBox[
               GraphicsBox[
                TagBox[
                 RasterBox[CompressedData["
1:eJx1lAdQFGcUgN/t7t3RFLhDQDw4EAEpSlXqIb1IDXhiAhpBSixBUZqKIko0
GFBACBIQKSGHjEgJCAQVIlgiopKoQSxoBnXArgMCt7d/9g50HCeZnW/f/juz
37z/f++tXtTmkFgMALbJ0beQyBTXrVsjt4eq0Ath/Lb1cfEx0b7xiTFxMVvt
onD6pdoMBA0pIQEhBDU95Qz3XUsYwQcEXGG+g1XgPhcI2OuM+6U7gX+6QIbf
bicZXjttceF+b+zd+FvZtxRFyaIUkpr2Vd4uJAyz6ZQaQrKTH+gi88NMOYMd
s8Bot4KaQQbLUi+dsNdOwcx4m7DZnHAAvWg2vHj3DP8fH6N6oJhhVTRb/srj
zqGjw7HIVcStcqswabCok3u5pJOJlvUyketVFrI7q/TE5he1Ms9CY+OJ8Qmp
C/8PH1F6I5ex4pR1UO+bVnRsaD8Z1eOJLGuV0eJmAjlcZVF+A0xy5RCTcruJ
I6MWAplVq7z9dbTkS6lDQkmwjz6JWBrxkr5s2PZ7YGPN6PdU/ICb2LqdSRrX
EKRFE5u06WIg2x5AdjTWXZjYrIU5qVOMIX4xSM6MiPymnSQ2nZ9YFmtvFvFS
ri0fS3nkTPncwimH8yy0qI6NTGoIJGhSHXer17wjaOS+sGpiISMRIOPj7AnV
TIzyFOn8KaYmpXumPZTUS0h91Xcy9oZf56PAfvkJj6tM0vYMW2wqYlNeIqMa
39JFeoJD+izXPAPNgEqzjS4ntId1cjHEzQLUcLdUSFESqWe6NojeO32eaZci
Clw6FN/7XFREHpdZaGkHhlxbuJKwdvVS62weWGdpYub75oBBsiI4fqcjZ1ug
carw+vaDM+fGpJ2MT/ulrD8fFpdy5juL+JGOIs5Ju0bFp0sbZ6M1V7jI4Yi6
vkP+fFh6aJ5OcIV9km+plb1Toa58ZncipHVugN4n3TBTFxnS586h05DcEQ07
2jeAWeIcME1TxSxz1f29qvipjkd4s5wKDMDqkErQ5j5rdHr4JCoZPPB8U0/Q
Ofc6/cyd59f7//PmofoH1ycQ4gkSXHL5voLDfG+TJBVYmKoM0n1aZ80lbPN4
IOxS6Err+5oqH8pBlaN7UdWrFJTx0AsV3U7J+eCZ6UdZnQdf92qHtVmNHRlK
QdFtbsXu+cZm9lm6YH+QD8tLLOa4Vxs2mldoUoIGvjj0kgkZ/8BxMumxKXVp
9GTAtGs6x/sjg9jx8yXY+gv+rWvOeaH0u+FTmc/80LrBhZOeHXMvujZptTu3
qj/Xq8SRZjFQ2tWATFqAcrrCQsLrWk9fjo0qfcjv2dtRMEzgsUEIGjbHFGp9
mhcgl1aeeNll1pT/XUDL7wNyvAnI6gIgs2ZcoluGS3hHMXJBJUus3whUUl9o
BaLoeiASnxRPQnCOJ86MACP1WLaPWix42/xEdJqICGRQT89EN0553iAml9HY
XMRJi99wZHgCQzqlGFpQrkBq0HmK7hV8MTMbxJNXwwBhoIiHg+XsKHBVjgR3
bgzDwyxHPs9cpPjQspWFLM/iyIrGsh1Hi0/h7/n5+B86GVhZ+GUtpFXIHImp
+Ep55PVTaa8wpPObWZ+GBfzgzdaLV1NQjSZ4quswm1mrwVTtG9xiXqqcp/Ye
Vvi8XXicZgqWwN3A2KS8FkKUIsBFeE7pnuBH9W7wA80tVXH4Z70CEYUhAEHA
V44CX04MYyUnGg/mROIeNI6cSELAiSJCuNHEt2qxeDInmkjU2Igf0Nkit4cR
Bosy6lKl8yGbkSlySvaf7n90jbG2KIJlkKDFZa8BffocrGEluND40PjJopBe
h4ENrAIbxioIpS8vgwQNhTfjr6V9x/g8Rynjk2Pw9+Nb0PFXG/zcUw75bdmM
vNaDMsq6iqG9vxnqe2thdeEKdmC2H7t7oPPjvP0LVKoWgA==
                  
                  "], {{0, 20.}, {20., 0}}, {0, 255}, ColorFunction -> 
                  RGBColor], 
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                  MetaInformation -> <|
                   "Comments" -> <|"Software" -> "Adobe ImageReady"|>|>], 
                 Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
                ImageSizeRaw -> {20., 20.}, 
                PlotRange -> {{0, 20.}, {0, 20.}}], 
               ButtonFunction :> ($CellContext`ff = $CellContext`GetFolders[
                 NotebookDirectory[] <> "Measurements/"]), Appearance -> None,
                Evaluator -> Automatic, Method -> "Preemptive"]}, 
             "RowDefault"]}, {"\" \""}, {
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\"Moving Avarage Size (Number): \"", TextForm]], 
                    "InlineText"], 
                    Text["Moving Avarage Size (Number): "]], 14, StripOnInput -> 
                    False], 
                    DynamicBox[
                    ToBoxes[$CellContext`MovAv, StandardForm]]}, 
                    "RowDefault"]}, {
                    SliderBox[
                    Dynamic[$CellContext`MovAv], {10, 500, 10}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\"Laser Pulse Frequency (Hz): \"", TextForm]], 
                    "InlineText"], 
                    Text["Laser Pulse Frequency (Hz): "]], 14, StripOnInput -> 
                    False], 
                    DynamicBox[
                    ToBoxes[$CellContext`CenterFreq, StandardForm]]}, 
                    "RowDefault"]}, {
                    SliderBox[
                    Dynamic[$CellContext`CenterFreq], {1, 20000, 1}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\"Filter Bandwidth (Hz): \"", TextForm]], 
                    "InlineText"], 
                    Text["Filter Bandwidth (Hz): "]], 14, StripOnInput -> 
                    False], 
                    DynamicBox[
                    ToBoxes[$CellContext`Bandwidth, StandardForm]]}, 
                    "RowDefault"]}, {
                    SliderBox[
                    Dynamic[$CellContext`Bandwidth], {1, 11777.7777, 1}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                
                TemplateBox[{
                 "\"                                                      \"", 
                  ButtonBox[
                  "\"Save\"", 
                   ButtonFunction :> ($CellContext`confassoc[
                    "LaserPulseFrequency"] = $CellContext`CenterFreq; \
$CellContext`confassoc[
                    "FrequencyGap"] = $CellContext`Bandwidth; \
$CellContext`confassoc[
                    "MovingAvarage"] = $CellContext`MovAv; \
$CellContext`conflist = Map[{
                    Part[
                    Keys[
                    Normal[$CellContext`confassoc]], #], 
                    Part[
                    Values[
                    Normal[$CellContext`confassoc]], #]}& , 
                    Range[1, 
                    Length[
                    Part[$CellContext`conf, 1]]]]; 
                    Export[NotebookDirectory[] <> 
                    "main.conf", $CellContext`conflist, "CSV"]; Null), 
                   Appearance -> Automatic, Evaluator -> Automatic, Method -> 
                   "Preemptive"]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]}, {
            TemplateBox[{
              ButtonBox[
              "\"Start\"", ButtonFunction :> ($CellContext`conf = Map[Part[
                    Import[NotebookDirectory[] <> "main.conf"], 
                    Span[1, All], #]& , {1, 2}]; $CellContext`confassoc = 
                 AssociationThread[
                   Part[$CellContext`conf, 1], 
                   Part[$CellContext`conf, 2]]; $CellContext`CenterFreq = 
                 ToExpression[
                   $CellContext`confassoc[
                   "LaserPulseFrequency"]]; $CellContext`Bandwidth = 
                 ToExpression[
                   $CellContext`confassoc[
                   "FrequencyGap"]]; $CellContext`MovAv = ToExpression[
                   $CellContext`confassoc["MovingAvarage"]]; $CellContext`im = 
                 False; $CellContext`status = 
                 Style["Started", 14, 
                   Black]; $CellContext`imglist = {}; \
$CellContext`resamplingC = 
                 100; $CellContext`filename = $CellContext`folder <> 
                  "/"; {$CellContext`dx, $CellContext`dy} = 
                 Import[NotebookDirectory[] <> 
                   "Measurements/" <> $CellContext`filename <> 
                   "dxdy.mx"]; $CellContext`recstop = 
                 Range[3, $CellContext`dy 3, 3]; 
                Do[If[$CellContext`im, $CellContext`status = 
                    Style["Stopped", 14, Black]; 
                    Break[]]; $CellContext`progress = 
                   Round[($CellContext`iii 100.)/$CellContext`dy, 
                    0.1]; $CellContext`progresss = Style[
                    ToString[$CellContext`progress], 14, 
                    Black]; $CellContext`pth = 
                   NotebookDirectory[] <> 
                    "Measurements/" <> $CellContext`filename <> ToString[
                    Part[$CellContext`recstop, $CellContext`iii]] <> 
                    ".wav"; $CellContext`signalout = 
                   Import[$CellContext`pth]; $CellContext`bp = 
                   BandpassFilter[$CellContext`signalout, {
                    
                    Quantity[$CellContext`CenterFreq - $CellContext`Bandwidth,
                     "Hertz"], 
                    
                    Quantity[$CellContext`CenterFreq + $CellContext`Bandwidth,
                     "Hertz"]}]; $CellContext`data = Abs[
                    ArrayResample[
                    Part[
                    AudioData[$CellContext`bp], 1], 50000]]; $CellContext`ll = 
                   Length[$CellContext`data]; $CellContext`half = 
                   Floor[$CellContext`ll/2]; $CellContext`fw = 
                   Part[$CellContext`data, 
                    Span[1, $CellContext`half]]; $CellContext`bk = Reverse[
                    Part[$CellContext`data, 
                    Span[$CellContext`half + 1, All]]]; $CellContext`ofset = 
                   Round[Length[$CellContext`fw] 0.05]; $CellContext`out1 = 
                   MovingAverage[
                    Part[$CellContext`fw, 
                    
                    Span[$CellContext`ofset, -$CellContext`ofset]], \
$CellContext`MovAv]; $CellContext`out2 = MovingAverage[
                    Part[$CellContext`bk, 
                    
                    Span[$CellContext`ofset, -$CellContext`ofset]], \
$CellContext`MovAv]; 
                  AppendTo[$CellContext`imglist, {$CellContext`out1, \
$CellContext`out2}], {$CellContext`iii, 
                   Range[2, $CellContext`dy]}]; $CellContext`imglistFW = 
                 Part[$CellContext`imglist, 
                   Span[1, All], 1]; $CellContext`imglistBK = 
                 Part[$CellContext`imglist, 
                   Span[1, All], 2]; $CellContext`resssBK = ImageAdjust[
                   ImageResize[
                    Image[$CellContext`imglistBK], {400, 
                    400}]]; $CellContext`resssFW = ImageAdjust[
                   ImageResize[
                    Image[$CellContext`imglistFW], {400, 
                    400}]]; $CellContext`resss = 
                 ImageAdd[$CellContext`resssFW, $CellContext`resssFW]; \
$CellContext`mm = 
                 MinMax[$CellContext`resss]; $CellContext`ires = \
($CellContext`resss - Part[$CellContext`mm, 1]) (1/(Part[$CellContext`mm, 2] - 
                   Part[$CellContext`mm, 1])); $CellContext`OutImage = 
                 ImageAdjust[
                   Sharpen[
                    ImageResize[
                    
                    Colorize[$CellContext`ires, ColorFunction -> 
                    "SunsetColors"], {300, 300}]]]; Null), 
               ImageSize -> {70, 40}, Method -> "Queued", Appearance -> 
               Automatic, Evaluator -> Automatic], 
              ButtonBox[
              "\"STOP\"", 
               ButtonFunction :> ($CellContext`im = True; $CellContext`status = 
                 Style["Stopped", 14, Black]; Null), Method -> "Preemptive", 
               ImageSize -> {70, 40}, Appearance -> Automatic, Evaluator -> 
               Automatic]}, "RowDefault"]}, {
            TemplateBox[{
              StyleBox["\"Status: \"", 14, 
               GrayLevel[0], StripOnInput -> False], 
              DynamicBox[
               ToBoxes[
                Refresh[$CellContext`status, UpdateInterval -> 0], 
                StandardForm]]}, "RowDefault"]}, {
            TemplateBox[{
              StyleBox["\"Progress: \"", 14, 
               GrayLevel[0], StripOnInput -> False], 
              DynamicBox[
               ToBoxes[
                Refresh[$CellContext`progresss, UpdateInterval -> 0], 
                StandardForm]], 
              StyleBox["\" %\"", 14, 
               GrayLevel[0], StripOnInput -> False]}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
        ImageSize -> {380, 380}]}, {
       PanelBox[
        DynamicBox[
         ToBoxes[
          Refresh[$CellContext`OutImage, UpdateInterval -> 0], StandardForm]],
         ImageSize -> {320, 320}]}}, 
     GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
     "Column", 
     GridBoxItemSize -> {
      "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]},
  "RowDefault"]],
 CellMargins->{{0, 0}, {0, 0}},
 CellBracketOptions->{"Color"->RGBColor[0.269993, 0.308507, 0.6]},
 CellHorizontalScrolling->True,
 PageBreakAbove->True,
 PageBreakWithin->False,
 ShowAutoStyles->True,
 LineSpacing->{1.25, 0},
 AutoItalicWords->{},
 ScriptMinSize->9,
 ShowStringCharacters->False,
 FontFamily:>CurrentValue["PanelFontFamily"],
 FontSize:>CurrentValue[
  "PanelFontSize"],ExpressionUUID->"5b87778e-c6ec-4705-abf0-43e6bc4ca5ef"]
},
WindowSize->All,
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
WindowElements->{},
WindowTitle->"Scanning Laser Microscope Controller",
FrontEndVersion->"13.0 for Mac OS X ARM (64-bit) (February 4, 2022)",
StyleDefinitions->"Palette.nb",
ExpressionUUID->"dfe55276-0d22-45ce-b659-7f521f8f59ba"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[609, 21, 31094, 632, 724, InheritFromParent,ExpressionUUID->"5b87778e-c6ec-4705-abf0-43e6bc4ca5ef",
 PageBreakAbove->True,
 PageBreakWithin->False]
}
]
*)

(* End of internal cache information *)

